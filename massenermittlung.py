"""*******************************************************************
***************************************************************************
 Massenermittlung

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder
                              -------------------
        begin                : 2025-07-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Ludwig
        email                : devalue-scope-drum@duck.com
 ***************************************************************************

***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
"""

from pathlib import Path
from typing import TYPE_CHECKING, Callable

from qgis.core import Qgis
from qgis.gui import QgisInterface
from qgis.PyQt.QtGui import QIcon  # type: ignore[reportAttributeAccessIssue]
from qgis.PyQt.QtWidgets import (
    QAction,
    QMenu,  # type: ignore[reportAttributeAccessIssue]
    QToolButton,  # type: ignore[reportAttributeAccessIssue]
)

from . import resources  # noqa: F401 - Import is necessary to load resources
from .modules.find_stuff import FeatureFinder, FeatureType
from .modules.general import LayerManager, UserError, raise_runtime_error

if TYPE_CHECKING:
    from collections.abc import Generator

    from qgis.core import QgsVectorLayer


class Massenermittlung:
    """QGIS Plugin for renaming and moving layers to a GeoPackage."""

    BUTTON_TYPE = "simple"  # "menu" or "simple"

    def __init__(self, iface: QgisInterface) -> None:
        """Initialize the plugin.

        :param iface: An interface instance that allows interaction with QGIS.
        """

        self.iface: QgisInterface = iface
        self.plugin_dir: Path = Path(__file__).parent
        self.actions: list = []
        self.menu: str = "Massenermittlung"
        self.plugin_menu: QMenu | None = None
        self.dlg = None
        self.icon_path = ":/plugins/Massenermittlung/icon.png"

    def add_action(  # noqa: PLR0913 # pylint: disable=too-many-arguments,too-many-positional-arguments
        self,
        icon_path: str,
        text: str,
        callback: Callable,
        enabled_flag: bool = True,  # noqa: FBT001, FBT002
        add_to_menu: bool = True,  # noqa: FBT001, FBT002
        add_to_toolbar: bool = True,  # noqa: FBT001, FBT002
        status_tip: str | None = None,
        whats_this: str | None = None,
        parent=None,  # noqa: ANN001
    ) -> QAction:  # type: ignore[]
        """Add a QAction to the plugin's menu and/or toolbar.

        :param icon_path: Path to the icon for the action.
        :param text: Text to display for the action.
        :param callback: Function to call when the action is triggered.
        :param enabled_flag: Whether the action is enabled initially.
        :param add_to_menu: Whether to add the action to the plugin's menu.
        :param add_to_toolbar: Whether to add the action to the QGIS toolbar.
        :param status_tip: Status tip for the action.
        :param whats_this: "What's This?" help text for the action.
        :param parent: Parent widget for the action.
        :returns: The created QAction object.
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self) -> None:  # noqa: N802
        """Create the menu entries and toolbar icons for the plugin."""

        # Create a menu for the plugin in the "Plugins" menu
        self.plugin_menu = QMenu(self.menu, self.iface.pluginMenu())
        if self.plugin_menu is None:
            raise_runtime_error("Failed to create the plugin menu.")

        self.plugin_menu.setIcon(QIcon(self.icon_path))

        # Add an action for the main functionality
        run_action = self.add_action(
            self.icon_path,
            text="Massenermittlung",
            callback=self.run_massenermittlung,
            parent=self.iface.mainWindow(),
            add_to_menu=False,  # Will be added to our custom menu
            add_to_toolbar=False,  # Will be added manually based on BUTTON_TYPE
            status_tip="Massenermittlung",
            whats_this="Massenermittlung.",
        )
        self.plugin_menu.addAction(run_action)

        # Add our menu to the main "Plugins" menu
        self.iface.pluginMenu().addMenu(self.plugin_menu)  # type: ignore[]

        if self.BUTTON_TYPE == "menu":
            self.create_toolbar_button(run_action)
        elif self.BUTTON_TYPE == "simple":
            self.iface.addToolBarIcon(run_action)

    def create_toolbar_button(self, run_action: QAction) -> None:  # type: ignore[]
        """Add a toolbutton to the toolbar to show the flyout menu"""
        toolbar_button = QToolButton()
        toolbar_button.setMenu(self.plugin_menu)
        toolbar_button.setDefaultAction(run_action)
        toolbar_button.setPopupMode(QToolButton.InstantPopup)
        toolbar_action = self.iface.addToolBarWidget(toolbar_button)
        self.actions.append(toolbar_action)

    def unload(self) -> None:
        """Plugin unload method.

        Called when the plugin is unloaded according to the plugin QGIS metadata.
        """
        # Remove toolbar icons for all actions
        for action in self.actions:
            self.iface.removeToolBarIcon(action)

        # Remove the plugin menu from the "Plugins" menu.
        if self.plugin_menu:
            self.iface.pluginMenu().removeAction(self.plugin_menu.menuAction())  # type: ignore[]

        self.actions.clear()
        self.plugin_menu = None

    def run_massenermittlung(self) -> None:
        """Call the main function."""
        try:
            layer_manager: LayerManager = LayerManager(self.iface)
            selected_layer: QgsVectorLayer = layer_manager.selected_layer
            new_layer: QgsVectorLayer = layer_manager.new_layer

            finder = FeatureFinder(selected_layer=selected_layer, new_layer=new_layer)

            # Run the analysis
            found_features: dict[str, int] = finder.find_features(
                FeatureType.T_STUECKE | FeatureType.HAUSANSCHLUESSE | FeatureType.BOEGEN
            )

            base_message: str = (
                f"Massenermittlung für Layer '{selected_layer.name()}' abgeschlossen"
            )

            found_parts: Generator[str, None, None] = (
                f"{count} {name}" for name, count in found_features.items() if count > 0
            )

            details: str = " → ".join(found_parts)

            layer_manager.set_layer_style(new_layer)

            if self.iface and (msg_bar := self.iface.messageBar()):
                message: str = (
                    f"{base_message} → {details} gefunden."
                    if details
                    else f"{base_message}."
                )
                msg_bar.pushMessage("Success", message, level=Qgis.Success)

        except UserError:
            return
