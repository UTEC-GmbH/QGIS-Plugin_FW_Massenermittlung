"""*******************************************************************
import configparser
***************************************************************************
 Massenermittlung

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder
                              -------------------
        begin                : 2025-07-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Florian Ludwig
        email                : devalue-scope-drum@duck.com
 ***************************************************************************

***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
"""

import configparser
from pathlib import Path
from typing import TYPE_CHECKING, Callable

from qgis.core import Qgis, QgsFeature, QgsProject, QgsVectorLayer
from qgis.gui import QgisInterface
from qgis.PyQt.QtCore import (
    QCoreApplication,  # type: ignore[reportAttributeAccessIssue]
    QSettings,  # type: ignore[reportMissingTypeStubs]
    Qt,  # type: ignore[reportAttributeAccessIssue]
    QTranslator,  # type: ignore[reportMissingTypeStubs]
)
from qgis.PyQt.QtGui import QIcon  # type: ignore[reportAttributeAccessIssue]
from qgis.PyQt.QtWidgets import (
    QAction,
    QMenu,  # type: ignore[reportAttributeAccessIssue]
    QProgressBar,  # type: ignore[reportAttributeAccessIssue]
    QToolButton,  # type: ignore[reportAttributeAccessIssue]
)

from . import resources
from .modules import general as ge
from .modules import logs_and_errors as lae
from .modules.find_stuff import FeatureFinder, FeatureType

if TYPE_CHECKING:
    from qgis.gui import QgsMessageBar, QgsMessageBarItem


class Massenermittlung:
    """QGIS Plugin for renaming and moving layers to a GeoPackage."""

    BUTTON_TYPE = "simple"  # "menu" or "simple"

    def __init__(self, iface: QgisInterface) -> None:
        """Initialize the plugin.

        :param iface: An interface instance that allows interaction with QGIS.
        """

        self.iface: QgisInterface = iface
        self.msg_bar: QgsMessageBar | None = iface.messageBar()
        ge.iface = iface
        lae.iface = iface
        self.plugin_dir: Path = Path(__file__).parent
        self.actions: list = []
        self.plugin_menu: QMenu | None = None
        self.dlg = None
        self.icon_path: str = ":/compiled_resources/icon.svg"
        self.translator: QTranslator | None = None

        # Read metadata to get the plugin name for UI elements
        self.plugin_name: str = "UTEC Massenermittlung (dev)"  # Default
        metadata_path: Path = self.plugin_dir / "metadata.txt"
        if metadata_path.exists():
            config = configparser.ConfigParser()
            config.read(metadata_path)
            try:
                self.plugin_name = config.get("general", "name")
            except (configparser.NoSectionError, configparser.NoOptionError):
                lae.log_debug("Could not read name from metadata.txt", Qgis.Warning)

        self.menu: str = self.plugin_name

        # initialize translation
        locale = QSettings().value("locale/userLocale", "en")[:2]
        translator_path: Path = self.plugin_dir / "i18n" / f"{locale}.qm"

        if not translator_path.exists():
            lae.log_debug(f"Translator not found in: {translator_path}", Qgis.Warning)
        else:
            self.translator = QTranslator()
            if self.translator is not None and self.translator.load(
                str(translator_path)
            ):
                QCoreApplication.installTranslator(self.translator)
            else:
                lae.log_debug("Translator could not be installed.", Qgis.Warning)

    def add_action(  # noqa: PLR0913 # pylint: disable=too-many-arguments,too-many-positional-arguments
        self,
        icon_path: str,
        text: str,
        callback: Callable,
        enabled_flag: bool = True,  # noqa: FBT001, FBT002
        add_to_menu: bool = True,  # noqa: FBT001, FBT002
        add_to_toolbar: bool = True,  # noqa: FBT001, FBT002
        status_tip: str | None = None,
        whats_this: str | None = None,
        parent=None,  # noqa: ANN001
    ) -> QAction:  # type: ignore[]
        """Add a QAction to the plugin's menu and/or toolbar.

        :param icon_path: Path to the icon for the action.
        :param text: Text to display for the action.
        :param callback: Function to call when the action is triggered.
        :param enabled_flag: Whether the action is enabled initially.
        :param add_to_menu: Whether to add the action to the plugin's menu.
        :param add_to_toolbar: Whether to add the action to the QGIS toolbar.
        :param status_tip: Status tip for the action.
        :param whats_this: "What's This?" help text for the action.
        :param parent: Parent widget for the action.
        :returns: The created QAction object.
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        action.setToolTip(text)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self) -> None:  # noqa: N802
        """Create the menu entries and toolbar icons for the plugin."""

        # Initialize the resources (icons, etc.)
        resources.qInitResources()

        # Create a menu for the plugin in the "Plugins" menu
        self.plugin_menu = QMenu(self.menu, self.iface.pluginMenu())
        if self.plugin_menu is None:
            lae.raise_runtime_error("Failed to create the plugin menu.")

        self.plugin_menu.setIcon(QIcon(self.icon_path))

        # Add an action for the main functionality
        run_action = self.add_action(
            self.icon_path,
            text=self.plugin_name,
            callback=self.run_massenermittlung,
            parent=self.iface.mainWindow(),
            add_to_menu=False,  # Will be added to our custom menu
            add_to_toolbar=False,  # Will be added manually based on BUTTON_TYPE
            status_tip=self.plugin_name,
            whats_this=f"{self.plugin_name}.",
        )
        self.plugin_menu.addAction(run_action)

        # Add our menu to the main "Plugins" menu
        self.iface.pluginMenu().addMenu(self.plugin_menu)  # type: ignore[]

        if self.BUTTON_TYPE == "menu":
            self.create_toolbar_button(run_action)
        elif self.BUTTON_TYPE == "simple":
            self.iface.addToolBarIcon(run_action)

    def create_toolbar_button(self, run_action: QAction) -> None:  # type: ignore[]
        """Add a toolbutton to the toolbar to show the flyout menu"""
        toolbar_button = QToolButton()
        toolbar_button.setMenu(self.plugin_menu)
        toolbar_button.setDefaultAction(run_action)
        toolbar_button.setPopupMode(QToolButton.InstantPopup)
        toolbar_action = self.iface.addToolBarWidget(toolbar_button)
        self.actions.append(toolbar_action)

    def unload(self) -> None:
        """Plugin unload method.

        Called when the plugin is unloaded according to the plugin QGIS metadata.
        """
        # Remove the translator
        if self.translator:
            QCoreApplication.removeTranslator(self.translator)

        # Remove toolbar icons for all actions
        for action in self.actions:
            self.iface.removeToolBarIcon(action)

        # Remove the plugin menu from the "Plugins" menu.
        if self.plugin_menu:
            self.iface.pluginMenu().removeAction(self.plugin_menu.menuAction())  # type: ignore[]

        self.actions.clear()
        self.plugin_menu = None

        # Unload resources to allow for reloading them
        resources.qCleanupResources()

    def run_massenermittlung(self) -> None:
        """Call the main function."""

        lae.log_debug("... STARTING PLUGIN RUN ...", icon="✨✨✨")
        progress_widget = None
        temp_point_layer: QgsVectorLayer | None = None
        reprojected_layer: QgsVectorLayer | None = None
        progress_bar = QProgressBar()
        try:
            # Create a progress bar in the message bar
            if self.msg_bar:
                progress_widget: QgsMessageBarItem | None = self.msg_bar.createMessage(
                    QCoreApplication.translate(
                        "progress_bar", "Performing bulk assessment..."
                    )
                )
                if progress_widget:
                    progress_bar.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
                    progress_widget.layout().addWidget(progress_bar)
                    self.msg_bar.pushWidget(progress_widget, Qgis.Info)

            layer_manager: ge.LayerManager = ge.LayerManager()
            reprojected_layer = layer_manager.selected_layer

            # Create a temporary layer for the results
            temp_point_layer = ge.create_temporary_point_layer(layer_manager.project)

            finder = FeatureFinder(
                selected_layer=reprojected_layer, temp_point_layer=temp_point_layer
            )

            # Run the analysis
            found_features: dict[str, int] = finder.find_features(
                FeatureType.T_PIECES
                | FeatureType.HOUSES
                | FeatureType.BENDS
                | FeatureType.REDUCERS,
                progress_bar,
            )

            # Now create the final layer and copy features
            new_layer: QgsVectorLayer = layer_manager.new_layer

            # Set progress for the copy operation
            feature_count = temp_point_layer.featureCount()
            progress_bar.setMaximum(feature_count)
            progress_bar.setValue(0)
            if progress_widget:
                progress_widget.setText(
                    QCoreApplication.translate(
                        "progress_bar", "Writing results to new layer..."
                    )
                )

            new_layer.startEditing()
            lae.log_debug(
                f"Trying to add {feature_count} features "
                f"from the temporary point layer to the new layer."
            )
            lae.log_debug(
                f"Temporary point layer: {len(temp_point_layer.fields())} Fields / "
                f"New layer: {len(new_layer.fields())} Fields"
            )

            target_fields = new_layer.fields()
            for i, feature in enumerate(temp_point_layer.getFeatures()):
                new_feature = QgsFeature(target_fields)
                new_feature.setGeometry(feature.geometry())
                for field in feature.fields():
                    # copy attribute if field with same name exists in target
                    idx = target_fields.indexOf(field.name())
                    if idx != -1:
                        new_feature.setAttribute(idx, feature.attribute(field.name()))
                new_layer.addFeature(new_feature)
                progress_bar.setValue(i + 1)

            new_layer.commitChanges()
            lae.log_debug(
                f"After editing, the new layer has {new_layer.featureCount()} features."
            )

            # 1. Use a placeholder for the layer name in the base message.
            base_message = QCoreApplication.translate(
                "summary", "Bulk assessment for layer '{0}' completed "
            ).format(reprojected_layer.name())

            # 2. Rephrase the details to be "Name: Count" to avoid complex plurals.
            #    The name itself is translated from a new 'feature_names' context.
            found_parts: list[str] = [
                f"{name}: {count}"
                for name, count in found_features.items()
                if count > 0
            ]
            details: str = " | ".join(found_parts)

            layer_manager.set_layer_style(new_layer)

            if self.msg_bar:
                # Clear the progress bar before showing the final message
                self.msg_bar.clearWidgets()

                # 3. Combine the base message and the dynamic details.
                if details:
                    final_message: str = f"🥳 {base_message} → {details}."
                else:
                    final_message = f"{base_message}."

                self.msg_bar.pushMessage(final_message, Qgis.Success)
                lae.log_debug(final_message, Qgis.Success)

        except (lae.CustomUserError, lae.CustomRuntimeError):
            return

        finally:
            project: QgsProject | None = QgsProject.instance()

            if temp_point_layer is not None and project is not None:
                project.removeMapLayer(temp_point_layer.id())
                lae.log_debug("Temporary point layer removed.")

            if reprojected_layer is not None and project is not None:
                project.removeMapLayer(reprojected_layer.id())
                lae.log_debug("In-memory copy of the selected layer removed.")
